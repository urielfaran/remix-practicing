// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Status {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model Todo {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?
  dueTime      DateTime?
  status       Status
  completeTime DateTime?
  List         List      @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId       Int
  users        User[]

  Label Label[]
}

model List {
  id      Int    @id @default(autoincrement())
  todos   Todo[]
  title   String
  Board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId Int
}

model Board {
  id                Int                 @id @default(autoincrement())
  lists             List[]
  name              String
  backgroundColor   String?
  UserBoardRelation UserBoardRelation[]
  creatingUser      User                @relation(fields: [creatingUserid], references: [id])
  creatingUserid    Int
}

model User {
  id                Int                 @id @default(autoincrement())
  username          String              @unique
  password          String
  email             String?
  avatar            String?
  isDisabled        Boolean             @default(false)
  UserBoardRelation UserBoardRelation[]
  Boards            Board[]
  Todos             Todo[]

  SentNotification Notification[] @relation("SentNotifications")

  ReceivedNotifications Notification[] @relation("ReceivedNotifications")
}

model UserBoardRelation {
  board       Board   @relation(fields: [boardId], references: [id])
  boardId     Int
  user        User    @relation(fields: [userId], references: [id])
  userId      Int
  permissions Int
  isFavorite  Boolean @default(false)

  @@unique([boardId, userId])
}

model Notification {
  id            Int      @id @default(autoincrement())
  message       String
  creationTime  DateTime @default(now())
  user          User     @relation("ReceivedNotifications", fields: [userId], references: [id])
  userId        Int
  sendingUser   User     @relation("SentNotifications", fields: [sendingUserId], references: [id])
  sendingUserId Int
  isRead        Boolean  @default(false)
}

model Label {
  id              Int     @id @default(autoincrement())
  todoId          Int
  todo            Todo    @relation(fields: [todoId], references: [id])
  backgroundColor String?
}
